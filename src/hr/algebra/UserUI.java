/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;

import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Actor;
import hr.algebra.model.Genre;
import hr.algebra.model.Movie;
import hr.algebra.model.MovieTableModel;
import hr.algebra.utils.FileUtils;
import hr.algebra.utils.IconUtils;
import hr.algebra.utils.MessageUtils;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.TransferHandler;
import javax.swing.text.JTextComponent;

/**
 *
 * @author Tomo
 */
public class UserUI extends javax.swing.JFrame {

    /**
     * Creates new form UserUI
     */
    public UserUI() {
        initComponents();
        try {
            init();
        } catch (Exception ex) {
            Logger.getLogger(UserUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // ---------------------   GLOBAL VARIABLES  ---------------------    
    private List<JTextComponent> allTextFields;
    private List<JLabel> allErrorLabels;

    private Set<Actor> actors = new HashSet<>();
    private Set<Actor> directors = new HashSet<>();
    private Set<Genre> genres = new HashSet<>();

    private MovieTableModel tableModel;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tf_title = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tf_publishedDate = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        tf_originalName = new javax.swing.JTextField();
        tf_duration = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        list_actors = new javax.swing.JList<>();
        lbl_errorDescription = new javax.swing.JLabel();
        lbl_errorTitle = new javax.swing.JLabel();
        lbl_errorPublishedDate = new javax.swing.JLabel();
        lbl_errorOriginalName = new javax.swing.JLabel();
        lbl_errorDuration = new javax.swing.JLabel();
        lbl_errorActors = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        list_allActors = new javax.swing.JList<>();
        jLabel8 = new javax.swing.JLabel();
        lbl_errorGenres = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        list_allGenres = new javax.swing.JList<>();
        jLabel9 = new javax.swing.JLabel();
        lbl_picture = new javax.swing.JLabel();
        lbl_errorPicture = new javax.swing.JLabel();
        tf_picturePath = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        btn_add = new javax.swing.JButton();
        btn_update = new javax.swing.JButton();
        btn_delete = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        table_movies = new javax.swing.JTable();
        lbl_errorDirectors = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        list_directors = new javax.swing.JList<>();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tf_description = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        btn_choosePicture = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        list_genres = new javax.swing.JList<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        miLogOut = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("User UI");

        jLabel1.setText("Title");

        jLabel2.setText("Description");

        jLabel3.setText("Published date (yyyy-mm-ddThh:mm:ss)");

        jLabel4.setText("Original name");

        jLabel6.setText("Duration");

        jLabel7.setText("Picture");
        jLabel7.setToolTipText("");

        jScrollPane1.setViewportView(list_actors);

        lbl_errorDescription.setForeground(java.awt.Color.red);

        lbl_errorTitle.setForeground(java.awt.Color.red);

        lbl_errorPublishedDate.setForeground(java.awt.Color.red);

        lbl_errorOriginalName.setForeground(java.awt.Color.red);

        lbl_errorDuration.setForeground(java.awt.Color.red);

        lbl_errorActors.setForeground(java.awt.Color.red);

        jScrollPane2.setViewportView(list_allActors);

        jLabel8.setText("All actors");
        jLabel8.setToolTipText("");

        lbl_errorGenres.setForeground(java.awt.Color.red);

        jScrollPane3.setViewportView(list_allGenres);

        jLabel9.setText("All Genres");
        jLabel9.setToolTipText("");

        lbl_picture.setToolTipText("");
        lbl_picture.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lbl_errorPicture.setForeground(java.awt.Color.red);

        tf_picturePath.setEditable(false);

        jLabel10.setText("Picture path");

        btn_add.setText("Add");
        btn_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addActionPerformed(evt);
            }
        });

        btn_update.setText("Update");
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });

        btn_delete.setText("Delete");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        table_movies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table_movies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_moviesMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(table_movies);

        lbl_errorDirectors.setForeground(java.awt.Color.red);

        jScrollPane5.setViewportView(list_directors);

        jLabel11.setText("Directors");
        jLabel11.setToolTipText("");

        tf_description.setColumns(20);
        tf_description.setLineWrap(true);
        tf_description.setRows(5);
        jScrollPane6.setViewportView(tf_description);

        jLabel12.setText("Actors");
        jLabel12.setToolTipText("");

        btn_choosePicture.setText("Choose picture");
        btn_choosePicture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_choosePictureActionPerformed(evt);
            }
        });

        jLabel13.setText("Genres");
        jLabel13.setToolTipText("");

        jScrollPane7.setViewportView(list_genres);

        jMenu2.setText("Navigation");

        miLogOut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        miLogOut.setText("Log out");
        miLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miLogOutActionPerformed(evt);
            }
        });
        jMenu2.add(miLogOut);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 892, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tf_originalName, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_errorOriginalName, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tf_duration, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_errorDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jScrollPane6)
                                    .addComponent(tf_title, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbl_errorDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbl_errorTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tf_publishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_errorPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbl_errorActors, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lbl_picture, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(112, 112, 112)
                                        .addComponent(lbl_errorPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbl_errorGenres, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_errorDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btn_choosePicture, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(tf_picturePath, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(btn_add, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btn_update, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btn_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tf_title, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_errorTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_errorDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tf_publishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbl_errorPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tf_originalName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbl_errorOriginalName, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tf_duration, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbl_errorDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbl_errorActors, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lbl_errorPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lbl_picture, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 12, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(lbl_errorGenres, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(lbl_errorDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(72, 72, 72))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btn_choosePicture))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btn_add, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btn_update, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btn_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(tf_picturePath, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(66, 66, 66)))))))
                .addGap(20, 20, 20)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // ---------------------   BUTTONS  ---------------------    

    private void miLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miLogOutActionPerformed
        LoginAndRegisterPlaceholder.LogOut();
        this.dispose();
    }//GEN-LAST:event_miLogOutActionPerformed

    private void btn_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addActionPerformed
        if (!formValid()) {
            return;
        }
        Movie movie = CreateMovieFromForm();
        try {
            RepositoryFactory.getRepository().uploadMovie(movie);
            loadTableModel();
            clearForm();
            MessageUtils.showInformationMessage("Success", "The movie has been added successfully.");
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("ERROR", "There has been an error and the movie might not have been added.");
            Logger.getLogger(UserUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_addActionPerformed

    private void btn_choosePictureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_choosePictureActionPerformed
        Optional<File> file = FileUtils.uploadFile("Images", "jpg", "png", "jpeg");
        if (file.isPresent()) {
            tf_picturePath.setText(file.get().getAbsolutePath());
            try {
                ImageIcon icon = IconUtils.createIcon(file.get().getAbsolutePath(), 366, 343);
                lbl_picture.setIcon(icon);
            } catch (IOException ex) {
                Logger.getLogger(UserUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btn_choosePictureActionPerformed

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        if (table_movies.getSelectedRow() == -1) {
            MessageUtils.showErrorMessage("Error", "Please select a movie first");
            return;
        }
        try {
            Integer selectedMovieId = (Integer) table_movies.getValueAt(table_movies.getSelectedRow(), 0);
            RepositoryFactory.getRepository().deleteMovie(selectedMovieId);
            Files.deleteIfExists(Paths.get(table_movies.getValueAt(table_movies.getSelectedRow(), 9).toString()));
            loadTableModel();
            clearForm();
            MessageUtils.showInformationMessage("Success", "The selected movie has been succesfully deleted.");

        } catch (Exception ex) {
            Logger.getLogger(UserUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btn_deleteActionPerformed

    private void table_moviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_moviesMouseClicked
        genres.clear();
        actors.clear();
        directors.clear();

        tf_title.setText(table_movies.getValueAt(table_movies.getSelectedRow(), 1).toString());
        tf_description.setText(table_movies.getValueAt(table_movies.getSelectedRow(), 2).toString());
        tf_publishedDate.setText(table_movies.getValueAt(table_movies.getSelectedRow(), 3).toString());
        tf_originalName.setText(table_movies.getValueAt(table_movies.getSelectedRow(), 4).toString());
        tf_duration.setText(table_movies.getValueAt(table_movies.getSelectedRow(), 5).toString());

        //GENRES
        DefaultListModel<Genre> model_genres = new DefaultListModel<>();
        List<Genre> table_genres = (List<Genre>) table_movies.getValueAt(table_movies.getSelectedRow(), 6);
        for (Genre genre : table_genres) {
            model_genres.addElement(genre);
            genres.add(genre);
        }
        list_genres.setModel(model_genres);

        //ACTORS
        DefaultListModel<Actor> model_actors = new DefaultListModel<>();
        List<Actor> table_actors = (List<Actor>) table_movies.getValueAt(table_movies.getSelectedRow(), 7);
        for (Actor actor : table_actors) {
            model_actors.addElement(actor);
            actors.add(actor);
        }
        list_actors.setModel(model_actors);

        //DIRECTORS
        DefaultListModel<Actor> model_directors = new DefaultListModel<>();
        List<Actor> table_directors = (List<Actor>) table_movies.getValueAt(table_movies.getSelectedRow(), 8);
        for (Actor actor : table_directors) {
            model_directors.addElement(actor);
            directors.add(actor);

        }
        list_directors.setModel(model_directors);

        tf_picturePath.setText(table_movies.getValueAt(table_movies.getSelectedRow(), 9).toString());
        try {
            lbl_picture.setIcon(IconUtils.createIcon(table_movies.getValueAt(table_movies.getSelectedRow(), 9).toString(), 270, 355));
        } catch (IOException ex) {
            Logger.getLogger(UserUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_table_moviesMouseClicked

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
        if (table_movies.getSelectedRow() == -1) {
            MessageUtils.showErrorMessage("Error", "Please select a movie first");
            return;
        }
        Movie movie = CreateMovieFromForm();
        try {
            int selectedMovieId = (Integer) table_movies.getValueAt(table_movies.getSelectedRow(), 0);
            RepositoryFactory.getRepository().updateMovie(selectedMovieId, movie, actors, directors, genres);
            clearForm();
            loadTableModel();
            MessageUtils.showInformationMessage("Sucess", "The movie has been updated succesfully.");

        } catch (Exception ex) {
            Logger.getLogger(UserUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_updateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_add;
    private javax.swing.JButton btn_choosePicture;
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_update;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLabel lbl_errorActors;
    private javax.swing.JLabel lbl_errorDescription;
    private javax.swing.JLabel lbl_errorDirectors;
    private javax.swing.JLabel lbl_errorDuration;
    private javax.swing.JLabel lbl_errorGenres;
    private javax.swing.JLabel lbl_errorOriginalName;
    private javax.swing.JLabel lbl_errorPicture;
    private javax.swing.JLabel lbl_errorPublishedDate;
    private javax.swing.JLabel lbl_errorTitle;
    private javax.swing.JLabel lbl_picture;
    private javax.swing.JList<Actor> list_actors;
    private javax.swing.JList<Actor> list_allActors;
    private javax.swing.JList<Genre> list_allGenres;
    private javax.swing.JList<Actor> list_directors;
    private javax.swing.JList<Genre> list_genres;
    private javax.swing.JMenuItem miLogOut;
    private javax.swing.JTable table_movies;
    private javax.swing.JTextArea tf_description;
    private javax.swing.JTextField tf_duration;
    private javax.swing.JTextField tf_originalName;
    private javax.swing.JTextField tf_picturePath;
    private javax.swing.JTextField tf_publishedDate;
    private javax.swing.JTextField tf_title;
    // End of variables declaration//GEN-END:variables

    // ---------------------   INITIALIZATION METHODS  ---------------------
    private void init() throws Exception {
        initValidation();
        initAllActors();
        initAllGenres();
        initDragAndDrop();
        initTable();
    }

    private void initValidation() {
        allTextFields = Arrays.asList(tf_title, tf_description, tf_publishedDate, tf_originalName, tf_duration, tf_picturePath);
        allErrorLabels = Arrays.asList(lbl_errorTitle, lbl_errorDescription, lbl_errorPublishedDate, lbl_errorOriginalName, lbl_errorDuration, lbl_errorPicture);
    }

    private void initAllActors() throws Exception {
        List<Actor> allActors = RepositoryFactory.getRepository().getAllActors();
        DefaultListModel<Actor> model = new DefaultListModel<>();
        for (Actor allActor : allActors) {
            model.addElement(allActor);
        }
        list_allActors.setModel(model);
    }

    private void initAllGenres() throws Exception {
        List<Genre> allGenres = RepositoryFactory.getRepository().getAllGenres();
        DefaultListModel<Genre> allGenresModel = new DefaultListModel<>();
        for (Genre genre : allGenres) {
            allGenresModel.addElement(genre);
        }
        list_allGenres.setModel(allGenresModel);
    }

    private void initTable() throws Exception {
        tableModel = new MovieTableModel(RepositoryFactory.getRepository().getAllMovies());
        table_movies.setModel(tableModel);
    }

    private void initDragAndDrop() {
        list_allActors.setDragEnabled(true);
        list_allActors.setTransferHandler(new ExportActorHandler());

        list_allGenres.setDragEnabled(true);
        list_allGenres.setTransferHandler(new ExportGenreHandler());

        list_actors.setDropMode(DropMode.ON);
        list_actors.setTransferHandler(new ImportActorsHandler());

        list_directors.setDropMode(DropMode.ON);
        list_directors.setTransferHandler(new ImportDirectorsHandler());

        list_genres.setDropMode(DropMode.ON);
        list_genres.setTransferHandler(new ImportGenresHandler());
    }

    // ---------------------   LOAD MODELS  ---------------------
    private void loadGenresModel() {
        DefaultListModel<Genre> genresModel = new DefaultListModel<>();
        for (Genre genre : genres) {
            genresModel.addElement(genre);
        }
        list_genres.setModel(genresModel);
    }

    private void loadActorsModel() {
        DefaultListModel<Actor> actorsModel = new DefaultListModel<>();
        for (Actor actor : actors) {
            actorsModel.addElement(actor);
        }
        list_actors.setModel(actorsModel);
    }

    private void loadDirectorsModel() {
        DefaultListModel<Actor> directorsModel = new DefaultListModel<>();
        for (Actor actor : directors) {
            directorsModel.addElement(actor);
        }
        list_directors.setModel(directorsModel);
    }

    private void loadTableModel() throws Exception {
        tableModel.setMovies(RepositoryFactory.getRepository().getAllMovies());
    }

    // ---------------------   DRAG AND DROP HANDLERS ----------------------
    //GENRE
    private class ExportGenreHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new GenreTransferable(list_allGenres.getSelectedValue());
        }
    }

    private class ImportGenresHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(GenreTransferable.GENRE_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Genre add = (Genre) transferable.getTransferData(GenreTransferable.GENRE_FLAVOR);
                if (genres.add(add)) {
                    loadGenresModel();
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(UserUI.class.getName()).log(Level.SEVERE, null, ex);
            }

            return false;
        }

    }

    //ACTOR
    private class ExportActorHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new ActorTransferable(list_allActors.getSelectedValue());
        }
    }

    private class ImportActorsHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(ActorTransferable.ACTOR_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Actor add = (Actor) transferable.getTransferData(ActorTransferable.ACTOR_FLAVOR);
                if (actors.add(add)) {
                    loadActorsModel();
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(UserUI.class.getName()).log(Level.SEVERE, null, ex);
            }

            return false;
        }

    }

    //DIRECTOR
    private class ImportDirectorsHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferSupport support) {
            return support.isDataFlavorSupported(ActorTransferable.ACTOR_FLAVOR);
        }

        @Override
        public boolean importData(TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Actor add = (Actor) transferable.getTransferData(ActorTransferable.ACTOR_FLAVOR);
                if (directors.add(add)) {
                    loadDirectorsModel();
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(UserUI.class.getName()).log(Level.SEVERE, null, ex);
            }

            return false;
        }

    }

    // ---------------------   OTHER METHODS  ---------------------
    private boolean formValid() {
        clearErrorLabels();
        boolean ok = true;
        for (int i = 0; i < allTextFields.size(); i++) {
            if (allTextFields.get(i).getText().trim().isEmpty()) {
                allErrorLabels.get(i).setText("X");
                ok = false;
            }
        }

        return ok;
    }

    private void clearErrorLabels() {
        for (JLabel el : allErrorLabels) {
            el.setText("");
        }
    }

    private void clearForm() {
        tf_title.setText("");
        tf_description.setText("");
        tf_duration.setText("");
        tf_originalName.setText("");
        tf_picturePath.setText("");
        tf_publishedDate.setText("");
        actors.clear();
        directors.clear();
        genres.clear();
        lbl_picture.setIcon(null);
        loadActorsModel();
        loadDirectorsModel();
        loadGenresModel();
    }

    private Movie CreateMovieFromForm() throws NumberFormatException {
        Movie movie = new Movie(
                tf_title.getText().trim(),
                LocalDateTime.parse(tf_publishedDate.getText().trim()),
                tf_description.getText().trim(),
                tf_originalName.getText().trim(),
                Integer.parseInt(tf_duration.getText().trim()),
                tf_picturePath.getText().trim());

        List<Actor> movie_actors = new ArrayList<>();
        List<Actor> movie_directors = new ArrayList<>();
        List<Genre> movie_genres = new ArrayList<>();
        for (Actor actor : actors) {
            movie_actors.add(actor);
        }
        movie.setActors(movie_actors);
         for (Actor actor : directors) {
            movie_directors.add(actor);
        }
        movie.setDirectors(movie_directors);
         for (Genre genre : genres) {
            movie_genres.add(genre);
        }
        movie.setGenres(movie_genres);

        return movie;
    }

}
